<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 知识铺</title>
    <link>https://blog.zshipu.com/article/post/</link>
    <description>Recent content in Posts on 知识铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright © &lt;a href=&#34;https://blog.zshipu.com/&#34;&gt;知识铺&lt;/a&gt; 2019.</copyright>
    <lastBuildDate>Sun, 20 Oct 2019 20:32:12 +0800</lastBuildDate>
    
	<atom:link href="https://blog.zshipu.com/article/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lesson0- 搭建 Node.js 开发环境</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson0/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson0/readme/</guid>
      <description>《搭建 Node.js 开发环境》 本课程假设大家都是在 Linux 或者 Mac 下面。至于使用 Windows 并坚持玩新技术的同学，我坚信他们一定有着过人的、甚至是不可告人的兼容性 bug 处理能</description>
    </item>
    
    <item>
      <title>lesson1- 一个最简单的 express 应用</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson1/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson1/readme/</guid>
      <description>《一个最简单的 express 应用》 目标 建立一个 lesson1 项目，在其中编写代码。当在浏览器中访问 http://localhost:3000/ 时，输出 Hello World。 挑战 访问 http://localhost:3000/ 时，输出 你好，世界。 知识点 包管理</description>
    </item>
    
    <item>
      <title>lesson10- benchmark 怎么写</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson10/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson10/readme/</guid>
      <description>《benchmark 怎么写》 目标 有一个字符串 var number = &#39;100&#39;，我们要将它转换成 Number 类型的 100。 目前有三个选项：+, parseInt, Number 请测试哪个方法更快。 知</description>
    </item>
    
    <item>
      <title>lesson11- 作用域与闭包：this，var，(function () {})</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson11/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson11/readme/</guid>
      <description>《作用域与闭包：this，var，(function () {})》 目标 无具体目标 知识点 理解 js 中 var 的作用域 了解闭包的概念 理解 this 的指向 课程内容 es6</description>
    </item>
    
    <item>
      <title>lesson12- 线上部署：heroku</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson12/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson12/readme/</guid>
      <description>《线上部署：heroku》 目标 将 https://github.com/Ricardo-Li/node-practice-2 (这个项目已经被删了。参照 https://github.com/alsotang/node-lessons/tree/master/lesson3 的代码自己操作一下吧。)这个项目部署上 heroku，成为一个线上项目 我部署的在</description>
    </item>
    
    <item>
      <title>lesson13- 持续集成平台：travis</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson13/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson13/readme/</guid>
      <description>《持续集成平台：travis》 目标 无明确目标 知识点 学习使用 travis-ci 对项目进行持续集成测试 (https://travis-ci.org/ ) 课程内容 首先来看看这个项目：https://githu</description>
    </item>
    
    <item>
      <title>lesson14- js 中的那些最佳实践</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson14/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson14/readme/</guid>
      <description>《js 中的那些最佳实践》 这个章节需要大家帮忙补充，一次性想不完那么多 JavaScript 语言精粹 http://book.douban.com/subject/3590768/ 这本书很薄，只有 155 页，但该讲的几乎都讲了。大家想办法搞来看看</description>
    </item>
    
    <item>
      <title>lesson15- Mongodb 与 Mongoose 的使用</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson15/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson15/readme/</guid>
      <description>《Mongodb 与 Mongoose 的使用》 目标 无明确目标 知识点 了解 mongodb (http://www.mongodb.org/ ) 学习 mongoose 的使用 (http://mongoosejs.com/ ) 课程内容 mongodb mongodb 这个名词相信大家不会陌生吧。有段时间 nosql 的概念炒得特别火</description>
    </item>
    
    <item>
      <title>lesson16- cookie 和 session</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson16/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson16/readme/</guid>
      <description>cookie 和 session 众所周知，HTTP 是一个无状态协议，所以客户端每次发出请求时，下一次请求无法得知上一次请求所包含的状态数据，如何能把一个用户的状态数据</description>
    </item>
    
    <item>
      <title>lesson17- 使用 promise 替代回调函数</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson17/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson17/readme/</guid>
      <description>《使用 promise 替代回调函数》 知识点 理解 Promise 概念，为什么需要 promise 学习 q 的 API，利用 q 来替代回调函数(https://github.com/krisko</description>
    </item>
    
    <item>
      <title>lesson18- 何为 connect 中间件</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson18/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson18/readme/</guid>
      <description>《何为 connect 中间件》 目标 理解中间件的概念 了解 Connect 的实现 课程内容 原生 httpServer 遇到的问题 中间件思想 Connect 实现 Express 简介 这是从 httpServer 到 Express 的升级过程。 HTTP Nodejs 的经典 httpServer 代码 var http =</description>
    </item>
    
    <item>
      <title>lesson2- 学习使用外部模块</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson2/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson2/readme/</guid>
      <description>《学习使用外部模块》 目标 建立一个 lesson2 项目，在其中编写代码。 当在浏览器中访问 http://localhost:3000/?q=alsotang 时，输出 alsotang 的 md5 值，即 bdd5e57b5c0040f9dc23d43</description>
    </item>
    
    <item>
      <title>lesson3- 使用 superagent 与 cheerio 完成简单爬虫</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson3/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson3/readme/</guid>
      <description>《使用 superagent 与 cheerio 完成简单爬虫》 目标 建立一个 lesson3 项目，在其中编写代码。 当在浏览器中访问 http://localhost:3000/ 时，输出 CNode(https://cnodejs.org/ ) 社区首页的所有帖子标题和链接，以 json 的形式。 输出示</description>
    </item>
    
    <item>
      <title>lesson4- 使用 eventproxy 控制并发</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson4/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson4/readme/</guid>
      <description>《使用 eventproxy 控制并发》 目标 建立一个 lesson4 项目，在其中编写代码。 代码的入口是 app.js，当调用 node app.js 时，它会输出 CNode(https://cnodejs.org/ ) 社区首页的所有主题的标题，链接和第</description>
    </item>
    
    <item>
      <title>lesson5- 使用 async 控制并发</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson5/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson5/readme/</guid>
      <description>《使用 async 控制并发》 目标 建立一个 lesson5 项目，在其中编写代码。 代码的入口是 app.js，当调用 node app.js 时，它会输出 CNode(https://cnodejs.org/ ) 社区首页的所有主题的标题，链接和第</description>
    </item>
    
    <item>
      <title>lesson6- 测试用例：mocha，should，istanbul</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson6/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson6/readme/</guid>
      <description>《测试用例：mocha，should，istanbul》 目标 建立一个 lesson6 项目，在其中编写代码。 main.js: 其中有个 fibonacci 函数。fibonacci 的介绍见：h</description>
    </item>
    
    <item>
      <title>lesson7- 浏览器端测试：mocha，chai，phantomjs</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson7/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson7/readme/</guid>
      <description>《浏览器端测试：mocha，chai，phantomjs》 目标 建立一个 lesson7 项目，在其中编写代码，我们暂时命名为 vendor 根据下面的步骤，最终的项目结构</description>
    </item>
    
    <item>
      <title>lesson8- 测试用例：supertest</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson8/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson8/readme/</guid>
      <description>《测试用例：supertest》 目标 建立一个 lesson8 项目，在其中编写代码。 app.js: 其中有个 fibonacci 接口。fibonacci 的介绍见：http://en.wik</description>
    </item>
    
    <item>
      <title>lesson9- 正则表达式</title>
      <link>https://blog.zshipu.com/article/post/nodejs/lesson9/readme/</link>
      <pubDate>Sun, 20 Oct 2019 20:32:12 +0800</pubDate>
      
      <guid>https://blog.zshipu.com/article/post/nodejs/lesson9/readme/</guid>
      <description>《正则表达式》 目标 var web_development = &amp;quot;python php ruby javascript jsonp perhapsphpisoutdated&amp;quot;; 找出其中 包含 p 但不包含 ph 的所有单词，即 [ &#39;python&#39;, &#39;javascript&#39;, &#39;jsonp&#39; ] 知识点 正则表达式的使用 js 中的正则表达式与 pcre(http://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions ) 的区别 课程内</description>
    </item>
    
  </channel>
</rss>